head
  title=""
  meta name="description" content="Advanced Static Analysis of Ruby"
  meta name="author"      content="David Worth - dave@highgroove.com"
  meta name="viewport"    content="width=1024, user-scalable=no"

  script src="js/jquery-1.7.2.min.js"
  script src="js/modernizr.custom.js"

  link rel="stylesheet" href="core/deck.core.css"
  script src="core/deck.core.js"

  /link rel="stylesheet" href="extensions/goto/deck.goto.css"
  /script src="extensions/goto/deck.goto.js"

  link rel="stylesheet" href="extensions/hash/deck.hash.css"
  script src="extensions/hash/deck.hash.js"

  /link rel="stylesheet" href="extensions/menu/deck.menu.css"
  /script src="extensions/menu/deck.menu.js"

  link rel="stylesheet" href="extensions/navigation/deck.navigation.css"
  script src="extensions/navigation/deck.navigation.js"

  link rel="stylesheet" href="extensions/scale/deck.scale.css"
  script src="extensions/scale/deck.scale.js"

  link rel="stylesheet" href="extensions/status/deck.status.css"
  script src="extensions/status/deck.status.js"

  link rel="stylesheet" href="themes/style/web-2.0.css"
  /link rel="stylesheet" href="themes/style/swiss.css"
  /link rel="stylesheet" href="themes/style/neon.css"

  /link rel="stylesheet" href="themes/transition/horizontal-slide.css"
  /link rel="stylesheet" href="themes/transition/vertical-slide.css"
  link rel="stylesheet" href="css/ATLRUG_07_2012-StaticAnalysisRuby.css"

  javascript:
    $(function() { $.deck('.slide'); });

body
  // use .deck-menu if you've enabled the menu extension above
  /article.deck-container.deck-menu
  article.deck-container
    section.slide
      h2 Static Analysis of Ruby
      h3 Turing Machines
      br
      h4 David Worth - dave@highgroove.com
      img.hglogo src="images/highgroove.png" alt="Highgroove Studios"

    section.slide
      h2 What Language is that?

      script src="https://gist.github.com/3666312.js?file=fib.scm"
      h3.slide Lisp?
      h3.slide Scheme?
      h3.slide Clojure?
      h3.slide ... I would have accepted any.

    section.slide
      h2 Why Lisps?

      h3.slide
        | ... because they show that computers are Turing machines.
        a href="http://www.flickr.com/photos/ell-r-brown/5118274331/" title="Bletchley Park - Block B - The Bletchley Park Story - Statue of Alan Turing - by Stephen Kettle by ell brown, on Flickr"
          img src="http://farm2.staticflickr.com/1424/5118274331_4104ffa06d.jpg" width="500" height="375" alt="Bletchley Park - Block B - The Bletchley Park Story - Statue of Alan Turing - by Stephen Kettle"

    section.slide
      h2 Why Lisps?

      h3
        | ... because they show that computers are Turing machines.
        a href="http://www.flickr.com/photos/ell-r-brown/5118274331/" title="Bletchley Park - Block B - The Bletchley Park Story - Statue of Alan Turing - by Stephen Kettle by ell brown, on Flickr"
          img src="http://farm2.staticflickr.com/1424/5118274331_4104ffa06d.jpg" width="500" height="375" alt="Bletchley Park - Block B - The Bletchley Park Story - Statue of Alan Turing - by Stephen Kettle"
      h3 "data" and "code" are indistinguishable in Lisps because they are identically encoded "lists"

    section.slide
      h2 Shellcode 
      h3 another great example of our Turing Machines
      script src="https://gist.github.com/3666312.js?file=shellcode_turing_machine.c"

    section.slide
      h2 Ruby as an acceptable Lisp

      h3.slide
        ' Appologies to 
        a href="http://steve-yegge.blogspot.com/2006/04/lisp-is-not-acceptable-lisp.html" Steve Yegge but...
      h3.slide
        ' I posit that Ruby is a perfectly acceptable Lisp.
      h3.slide
        | Even if it lacks some cool Lisp-isms like macros
      h3.slide
        ' because it fakes it so well with things like
        tt define_method

    section.slide
      h2 Abstract Syntax Trees
      h3.slide Without teaching a compilers class...
      a href="http://en.wikipedia.org/wiki/Compilers:_Principles,_Techniques,_and_Tools"
        image src="images/dragon_book.jpg" alt="Purple(?) Dragon Book Cover" style="float: right;"
      ul
        li.slide an Abstract Syntax Tree (AST) is an internal representation used to represent a language
        li.slide used by a compiler as an intermediate representation between your code and the compiled machine code
        li.slide used by "interpreted"<sup>1</sup> languages like Ruby or Python<sup>2</sup> to instruct the execution environment (virtual machine) how to manipulate its state.
      ol
        li.slide These "interpreted" languages pretty much aren't anymore.  Everything executes in a VM, and it's VMs/turtles all the way down.
        li.slide Python is complicated, has a byte-compiler, and I am out of my comfort zone talking about the nuts and bolts of it as a language.

    section.slide
      h1 Analyzing Ruby

    section.slide
      h2 Here's some everyday Ruby:
      script src="https://gist.github.com/3666312.js?file=string_foo_bar_baz_sexp.rb"
      h3.slide
        | What the?
      h3.slide
        | Who can tell me what this does?

    section.slide
      h2 Side by side...
      h3 it is much clearer what's going on
      script src="https://gist.github.com/3666312.js?file=string_foo_bar_baz_sexp.rb"
      script src="https://gist.github.com/3666312.js?file=string_foo_bar_baz.rb"

    section.slide
      h2 Node types in Ruby's AST
      h3.slide You could almost just write code with every operator and extract the node types manually
      h3.slide or...

    section.slide
      h2 Node types in Ruby's AST (con't)
      h4
        | By reading the Ruby source we can learn about the node types:
        script src="https://gist.github.com/3666312.js?file=node_excerpts.c"

    /section.slide
      /h2 Some Surprises

      /h3.slide
        /tt private
        /'  isn't a "keyword" but a method call
        /a href="http://apidock.com/ruby/Module/private" APIDoc
      /h3.slide
        /| Thanks to Mike Skalnik for first pointing this out to me.

    section.slide
      h2 Do something meaningful
      h3.slide
        ' Detect user input in a string

    section.slide
      h2 This is impossible...

      h4 Ruby has all sorts of things that get in our way:
      ul
        li
          tt method_missing
        li
          tt eval

    section.slide
      h2 Other cool uses of Static Analysis
      ul.slide
        li
          a href="http://ruby.sadi.st/flog.html" Flog
          '  /
          a href="http://ruby.sadi.st/flay.html" Flay
        li
          a href="http://github.com/martinjandrews/roodi" Roodi
          '  /
          a href="https://github.com/troessner/reek" Reek

    section.slide
      h3 References

      ul
        li
          a href="http://blog.rubybestpractices.com/posts/judofyr/sexp-for-rubyists.html" Ruby Best Practices - Sexp for Rubyists
        li
          a href="https://github.com/seattlerb/ruby2ruby" ruby2ruby
          '  /
          a href="https://github.com/seattlerb/ruby_parser" ruby_parser
          '  /
          a href="https://github.com/seattlerb/parsetree" parsetree
          '  - All by 
          a href="http://zenspider.com/" Ryan Davis
          '  at
          a href="http://www.seattlerb.org/" Seattle.rb
        li
          a href="https://github.com/ruby/ruby/blob/trunk/node.c#L100-886" Ruby's AST Node types
      /a.deck-permalink href="." title="Permalink to References" #

      // Permalinks are available if you've enabled the hash exntension
      /a.deck-permalink href="." title="Permalink to this slide" #

    // If you've enabled the navigation extension
    p.deck-navigation
      a href="#"
        span.deck-prev-link title="Previous" &#8592;
      a href="#"
        span.deck-next-link title="Next" &#8594;

    // If you've enabled the status extension
    p.deck-status
      span.deck-status-current
      |  /
      span.deck-status-total
